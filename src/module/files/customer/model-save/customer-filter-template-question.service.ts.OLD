import { Injectable, OnInit } from '@angular/core';

import { QuestionBase } from '../../shared/dynamic-form/question-base';
import { CustomerService } from '../model/http-customer.service';
import { CustomerFilterTemplate } from './customer-filter-template';
import { Observable } from 'rxjs';
import { filter } from 'rxjs/operators';

@Injectable()
export class CustomerFilterTemplateQuestionService implements OnInit {

  test = {value: '>20010'};
  standardFilterTemplate: CustomerFilterTemplate;

constructor (private customerService: CustomerService) {}

ngOnInit() {
  // // this.customerFilterTemplates =
  // this.customerService.getCustomerFilterTemplates().pipe
  // .pipe(filter(res => res[0].templateName === 'standard'))
  // .subscribe(
  //   obj => this.standardFilterTemplate = res;
  // );
}

  getQuestions() {

    const questions: QuestionBase[] = [

      {
        key: 'id', // customer id
        value: this.test.value,
        label: 'Filter by Id',
        controlType: 'textbox',
        inputType: 'text',
        order: 10,
      },
      {
        key: 'name', // customer name
        value: '',
        label: 'Filter by Name',
        controlType: 'textbox',
        inputType: 'text',
        order: 20,
      },
      {
        key: 'city',
        value: '',
        label: 'Filter by City',
        controlType: 'textbox',
        inputType: 'textarea',
        order: 30,
      },
      // {
      //   key: 'cityCheckbox',
      //   value: '',
      //   label: 'Filter by City',
      //   controlType: 'checkbox',  // test checkbox OK
      //   order: 31,
      // },
      {
        key: 'email',
        value: '',
        label: 'Filter by Email',
        controlType: 'textbox',
        inputType: 'text',
        order: 40,
      },
      {
        key: 'status',
        label: 'Filter by Status',
        controlType: 'dropdown',
        options: [
          { key: 'solid', value: 'Solid' },
          { key: 'great', value: 'Great' },
          { key: 'good', value: 'Good' },
          { key: 'unproven', value: 'Unproven' }
        ],
        order: 50


      }];

    return questions.sort((a, b) => a.order - b.order);

  }


}
